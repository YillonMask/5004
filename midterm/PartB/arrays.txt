ArrayGood for:representing RGB values for a fixed number of pixels.Because the size of the number is fixed and don’t need to changed.Not good for:a to-do list application Because element insides needed to be added and deleted frequently.ArrayListGood Application Context:maintaining a list of active users in a chat application.Because: arraylist can be resized easily. It can be access with O(1) time. It has high-level operation like add, remove etc.Less Good Application Context:-keep track the frequency of each letter occurs. Because the number of letter is fixed as 26. Array is better.LinkedListGood Application Context:- queue system for restaurant:Because: it can resize. The time complexity for adding and deleting is O(1). It can easily add and delete elements from the linkedlistLess Good Application Context:- RGB matrix from a JPEG fileBecause we need to get access each element inside the matrix, if we use linkedlist, the traverse time is long.